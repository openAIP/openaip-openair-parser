import { z } from 'zod';
import { validateSchema } from '../validate-schema.js';
import {
    AbstractLineToken,
    type Config as BaseLineConfig,
    type IToken,
    type Tokenized,
} from './abstract-line-token.js';
import { TokenTypeEnum, type TokenType } from './token-type.enum.js';

export type Config = BaseLineConfig & {
    lastLineNumber: number;
};

export const ConfigSchema = z
    .object({
        lastLineNumber: z.number().min(1),
    })
    .strict()
    .describe('ConfigSchema');

/**
 * EOF token. Is not generated by the tokenizer but appended to the token list after tokenizer
 * is finished. Marks the end of the parsed file.
 */
export class EofToken extends AbstractLineToken<undefined> {
    static type: TokenType = TokenTypeEnum.EOF;
    protected _lastLineNumber: number;

    constructor(config: Config) {
        validateSchema(config, ConfigSchema, { assert: true, name: 'config' });

        const { tokenTypes, extendedFormat, lastLineNumber } = config;

        super({ tokenTypes, extendedFormat });

        this._lastLineNumber = lastLineNumber;
    }

    canHandle(line: string): boolean {
        validateSchema(line, z.string().nonempty(), { assert: true, name: 'line' });

        // IMPORTANT cannot handle any line
        return false;
    }

    tokenize(line: string, lineNumber: number): IToken {
        throw new Error('NOT IMPLEMENTED');
    }

    getAllowedNextTokens(): TokenType[] {
        // no token after EOL
        return [];
    }

    getTokenized(): Tokenized | undefined {
        return { line: '', lineNumber: this._lastLineNumber };
    }
}
